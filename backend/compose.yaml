# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker Compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
services:
  # database: 
  # #mySql server 
  #   image: mysql:5.7
  #   environment:
  #     MYSQL_PORT: 3306
  #     MYSQL_HOST: localhost
  #     MYSQL_DATABASE: RUCores
  #     MYSQL_USERNAME: root
  #     MYSQL_PASSWORD: root
  #   ports:
  #     - 3306:3306
  #   # volumes:
  #   #   - mysql-data:/var/lib/mysql
  server:
    # build:
    #   context: .
    #   dockerfile: Dockerfile
    image: mrjtest/rucoresbackend:latest
    environment:
      PREPOPULATE_DB: true
      NODE_ENV: production
      SQLITE_DB_PATH: ./database.sqlite3
      DB_LOGGING: false
      DB_SYNCHRONIZE: true
      DB_TYPE: sqlite
      APP_PORT: 3001
      LOG_LEVEL: debug
      SWAGGER: true
      RESPONSE_STACKTRACE: true
    ports:
      - 3001:3001
      - 3000:3000
    # depends_on:
    #   database:
    #     condition: service_healthy
    # volumes:
    #   - type: bind 
    #     source: ../
    #     target: /app
    #     read_only: false

# The commented out section below is an example of how to define a PostgreSQL
# database that your application can use. `depends_on` tells Docker Compose to
# start the database before your application. The `db-data` volume persists the
# database data between container restarts. The `db-password` secret is used
# to set the database password. You must create `db/password.txt` and add
# a password of your choosing to it before running `docker-compose up`.
#     depends_on:
#       db:
#         condition: service_healthy
#   db:
#     image: postgres
#     restart: always
#     user: postgres
#     secrets:
#       - db-password
#     volumes:
#       - db-data:/var/lib/postgresql/data
#     environment:
#       - POSTGRES_DB=example
#       - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
#     expose:
#       - 5432
#     healthcheck:
#       test: [ "CMD", "pg_isready" ]
#       interval: 10s
#       timeout: 5s
#       retries: 5
# volumes:
#   db-data:
# secrets:
#   db-password:
#     file: db/password.txt

